---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: Terraform AWS EC2

# License of this project
license: "APACHE"

# Canonical GitHub repo
github_repo: clouddrove/terraform-aws-ec2

# Badges to display
badges:
  - name: "Terraform"
    image: "https://img.shields.io/badge/Terraform-v1.1.7-green"
    url: "https://www.terraform.io"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-APACHE-blue.svg"
    url: "LICENSE.md"
  - name: "tfsec"
    image: "https://github.com/clouddrove/terraform-aws-ec2/actions/workflows/tfsec.yml/badge.svg"
    url: "https://github.com/clouddrove/terraform-aws-ec2/actions/workflows/tfsec.yml"
  - name: "static-checks"
    image: "https://github.com/clouddrove/terraform-aws-ec2/actions/workflows/terraform.yml/badge.svg"
    url: "https://github.com/clouddrove/terraform-aws-ec2/actions/workflows/terraform.yml"

#  description of this project
# yamllint disable rule:line-length
description: |-
  Terraform module to create an EC2 resource on AWS with ElasticC IP Addresses and Elastic Block Store.

# extra content
include:
  - "terraform.md"

# How to use this project
# yamllint disable rule:line-length
usage: |-
  Here is examples of how you can use this module in your inventory structure:
  ### Basic Example
  ```hcl
      module "ec2" {
    source        = "clouddrove/ec2/aws"

      name        = "ec2"
      environment = "test"
      label_order = ["name", "environment"]

      #instance
      instance_enabled = true
      instance_count   = 2
      ami              = "ami-08d658f84a6d84a80"
      instance_type    = "t2.nano"
      monitoring       = false
      tenancy          = "default"

      #Networking
      vpc_security_group_ids_list = [module.ssh.security_group_ids, module.http-https.security_group_ids]
      subnet_ids                  = tolist(module.public_subnets.public_subnet_id)
      assign_eip_address          = true
      associate_public_ip_address = true

      #Keypair
      key_name = module.keypair.name

      #IAM
      instance_profile_enabled = true
      iam_instance_profile     = module.iam-role.name

      #Root Volume
      root_block_device = [
        {
          volume_type           = "gp2"
          volume_size           = 15
          delete_on_termination = true
          kms_key_id            = module.kms_key.key_arn
        }
      ]

      #EBS Volume
      ebs_optimized      = false
      ebs_volume_enabled = false
      ebs_volume_type    = "gp2"
      ebs_volume_size    = 30

      #DNS
      dns_enabled = false
      dns_zone_id = "Z1XJD7SSBKXLC1"
      hostname    = "ec2"

      #Tags
      instance_tags = { "snapshot" = true }

      # Metadata
      metadata_http_tokens_required        = "optional"
      metadata_http_endpoint_enabled       = "enabled"
      metadata_http_put_response_hop_limit = 2
      }
  ```

  ### ebs_mount
  ```hcl
      module "ec2" {
      source        = "clouddrove/ec2/aws"
      name          = "ec2"
      environment   = "test"
      label_order   = ["name", "environment"]

      #Instance
      instance_enabled = true
      instance_count   = 2
      ami              = "ami-08d658f84a6d84a80"
      instance_type    = "t2.nano"
      monitoring       = false
      tenancy          = "default"

      #Keypair
      key_name = module.keypair.name

      #Networking
      vpc_security_group_ids_list = [module.ssh.security_group_ids, module.http-https.security_group_ids]
      subnet_ids                  = tolist(module.public_subnets.public_subnet_id)
      assign_eip_address          = true
      associate_public_ip_address = true

      #IAM
      instance_profile_enabled = true
      iam_instance_profile     = module.iam-role.name

      #Root Volume
      root_block_device = [
        {
          volume_type           = "gp2"
          volume_size           = 15
          delete_on_termination = true
          kms_key_id            = module.kms_key.key_arn
        }
      ]

      #EBS Volume
      ebs_optimized      = false
      ebs_volume_enabled = true
      ebs_volume_type    = "gp2"
      ebs_volume_size    = 30

      #DNS
      dns_enabled = false
      dns_zone_id = "Z1XJD7SSBKXLC1"
      hostname    = "ec2"

      #Tags
      instance_tags = { "snapshot" = true }

      # Metadata
      metadata_http_tokens_required        = "optional"
      metadata_http_endpoint_enabled       = "enabled"
      metadata_http_put_response_hop_limit = 2

      #Mount EBS With User Data
      user_data = file("user-data.sh")
      
      
    }
  ```
